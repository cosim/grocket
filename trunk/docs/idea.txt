///////////////////////////////////////////////////////////////////////

一、基础库

现在的基础库的使用过程中遇到的一些问题，暂时眼前无法解决，但不能永远都不解决。
我想：基础库的历史很长了，其实我们现在需要着手搞一个新的基础库，这个基础库有但不限于如下特性：
   
1、跨平台
不只服务器用，客户端也要用、手机上也要用。目标平台是：
Windows 32/64、Linux 32/64、Mac OSX、Android、IOS、Windows Phone等所有产品现在和以后会
覆盖的操作系统。同一套代码支持上述平台，极大的降低了基础库的维护成本并扩大了基础库的
使用范围，同时由于使用更广泛而使代码更加稳定。

2、不能只把基础库绑定到C++语言
基础库不能只支持C++语言，而应该同时支持纯C接口，这可以让基础库的适用范围最大化。

3、不要继续制造版本地狱了
在工作中遇到版本打平的开销如此之大让我考虑，我们基础库的新版本与老版本必须100%二进制兼容，
即使对外的接口是C++的纯虚接口，在新版本的接口中增加方法，也绝不能要求使用者重新编译、
甚至链接程序。新版本的库应该可以直接覆盖老版本的库文件，而不需要链接老版本基础库的调用方
程序做任何事。
即使遇到了不兼容的基础库版本，也要尽量在装载或者初始化时第一时间让调用者知道，不要等到业
务逻辑core了增加追查成本。换句话说，版本兼容性检查必须在运行时的初始化阶段去做。

///////////////////////////////////////////////////////////////////////

二、高性能服务器框架

通用高性能服务器框架，给运维带来的方便性和可控性、给服务器程序开发效率的提高，
避免不同的人重复掉进同一个陷阱带来的开发成本的降低，都是不言而喻的。

拥有自己的服务器框架，比使用第三方的服务器框架更可控，起码我们知道坑在哪里，应该如何改进，
经过多年积累，有完整的文档与使用说明与示例，即使更换维护人员，知识还是会沉淀的，因为这个
服务器框架的所有演变过程都内部，而不是在第三方。

但如果使用第三方的服务器框架，我们对那个框架的熟悉程度决定了使用程度...如果换了维护人员，
又要重新学习，但那个时候可能第三方框架早已更新，多年以后，由于我们缺失了对这个第三方框
架演变过程的跟进，导致我们还在使用做了部分定制的老版本第三方框架，用也不舒服，不用又不行...

1、跨平台

Windows 32/64、Linux 32/64、Mac OSX

2、支持多种进程与线程模型

支持多线程模型和多进程模型的同时，对于我们使用最多的以fork模型实现资源共享的方式也提供支持。

3、高性能

每一行代码都精雕细琢，TCP性能超过nginx，至少也要和它持平。服务器内置HTTP协议支持，所以
可以和nginx服务器直接对比HTTP处理速度。

4、支持多语言编写服务器模块

可以用C和C++编写服务器模块。如果今后有需要，则还可以增加fastcgi和PHP等支持。

5、不要制造程序库的版本地狱
该高性能服务器框架不能动态链接公司现有基础库的动态链接库，只能静态链接，否则会在将来的某天
给模块开发者制造由于版本冲突而崩溃的机会。当然如果使用前述100％兼容的新基础库就没有这个问题。

前述的基础库，同样是只要有头文件就能使用，基础库的二进制代码由服务器框架的可执行程序统一
管理，不再使用库的方式，彻底解决版本地狱的问题（这只是一个思路，还要验证）

6、服务器模块编写简单

ACE太难用了，这套服务器框架绝不能像ACE那样以一套函数库的松散形式来提供给使用者。给服务器框架
开发扩展模块并运行，所需要的全部就是一个可执行程序grocketd和一个grocket.h头文件。

模块只需要编写用户协议解析和处理代码即可，服务器框架同时支持UDP和TCP，甚至可以通过HTTP
传送，而希望启动哪个协议由模块编写者自己决定。

开发人员经过一分钟的培训后，再用一分钟就能写一个功能模块，并让该功能同时支持TCP、UDP、
HTTP。

假设功能代码行数为1行、协议解析代码为10行的话，整个业务模块代码文件的行数最少不会超过20行。
到目前为止我还没看到哪个服务框架的使用可以简单到这种程度。

只需要服务器框架提供的一个头文件即可编写服务器模块，彻底让开发人员从链接过程产生的各种
问题中解脱。

详细说明参见 demo_module 工程的源码。
