
邹月明 20131010-01:00
======================
1. libgrocket
   丰富 server_object.c 的功能，在demo_module.c 里增加了 echo 服务器的功能。

邹月明 20131009-01:05
======================
1. libgrocket

   到目前为止，在 Windows、Linux、Mac 上都可以收发包了。

   grocket.h 里增加了 gr_library_t、gr_class_t、gr_object_t，这是服务器函数库的接口暴露形式。
   增加了 gr_library_invoke.h 实现了通用接口函数调用的实现。

   还有一个问题要解决：因为服务器对外暴露的接口只有头文件，没有库，如何让一个对象声明和一个
   二进制对象指针安全的建立起关系？初步解决了，见server_object.c文件中的check函数。

   !!!!!!!!!!!!!!!
   在 demo_module.c 里找 o->config_get_int 可以看到服务器框架提供的一处很有特色的功能。
   该类在服务器框架中的实现就在server_object.c里。再看一眼gr_library_invoke.c，我想你能猜出我
   要如何为用户暴露第三方函数库的大致思路了，是不是很赞？

   截止到目前，源代码行数是14767行，平均一天900多行跨平台代码。

邹月明 20131007-22:21
======================
1. libgrocket
   今天到目前为止干了17个小时，稍带脚把 BSD 和 Mac OS X 系统也支持了。现在程序可以
   跨的平台有：
   Windows 32／64、Linux 32／64，BSD／Mac OS X

   Windows不允许把一个SOCKET加到多个IOCP里，这是一个架构冲击。Windows操作系统事后
   通知的IO模型和其它操作系统的事前通知的IO模型本来就区别极大，再加上这个限制，真TMD
   让人想骂娘。

   修改实现让 tcp_in 和 tcp_out共用一个IOCP。不得不把本应放在.c文件中的一部分内容
   提出来到 tcp_io.h 文件中，该文件有 gr_tcp_in.c、gr_tcp_out.c 和 gr_poll_windows.c
   依赖。本次修改的原则和策略有以下几点：
   1) 对非Windows的架构、性能影响为0
   2) 万一以后Windows支持把SOCKET加到多个IOCP里，只需把增加的代码删除即可恢复优美的
      程序架构。（估计Windows支持该功能的可能性为0）
   3) 对数据收、发的业务处理逻辑，所有平台都必须只使用一份，便于维护。这也是为什么
      有tcp_io.h文件的原因。
   4) 由于收、发合并，导致理想中的收、发分别处理的逻辑在Windows上行不通了，必须要想办法
      判断当前是收动作还是发动作触发的事件，然后根据情况不同处理，所以增加了一个
      tcp_io_windows 函数给Windows用，其它平台还是保持理想的代码架构不变。

邹月明 20131005-23:15
======================
1. libgrocket
   正常TCP数据处理流程已经到tcp_out了，tcp_out还没实现

邹月明 20131004-05:26
======================
1. libgrocket
   将eventfd加入gr_event

邹月明 20131003-18:01
======================
1. libgrocket
   将network_in拆成tcp_accept, tcp_in, udp_in三部分, 这可以
   让 tcp_accept 的逻辑尽量的少, 它就可以有空闲时间用来删连接了
   将network_out拆成tcp_out, udp_out两部分.
   
   现在绝大部分代码的文件名从名称看起来都更直接了

邹月明 20131001-22:16
======================
1. libgrocket
   增加了gr_lock.h 线程锁
   增加了gr_queue.h, gr_queue.cpp 一个单线程写、单线程读的队列，尽量高性能
   增加了gr_list.h 一个双链表

邹月明 20130929-11:40
======================
1. demo_server
   完成了 demo 如何基于本框架写一个独立的服务器
2. libgrocketd
   增加了 gr_poll_t 用于封装 Windows 的 IOCP 与 Linux的 EPOLL 的差别。
   差别如此之大的IO模型做成这种统一还相对简单的接口，我目前还算一般满意。
   只是当初希望它是一个非常独立的类的想法没完成，它还是对其它的一些类有
   依赖，这也可以理解，因为这个东西本身就是架构侵入而且差别非常大的。

邹月明 20130928-01:25
======================
1. grocketd, libgrocket, demo_module
   完成了示范服务器端模块

邹月明 20130927-01:15
======================
1. libgrocketd
   内部模块隔离与访问方法彻底清晰了，增加了 gr_global.h 做为整个程序中
   唯一的全局变量。

邹月明 20130926-12:41
======================
1. libgrocketd
   继续完善内部模块划分，增加了几个工具类，内存分配使用tcmalloc 2.1

邹月明 20130925-02:37
======================
1. grocketd, libgrocketd

   本项目从今天开始

   完成了服务器框架对外接口的外部模块划分和内部模块划分，
   完成了服务器框架对外接口文件 gsocket.h
   接口支持以独立进程形式和调用方提供进程形式。
   先从同时支持32位和64位Windows和Linux开始。
   用C写，不是不会C++，是为了追求最佳性能和最简单的设计。
   比如红黑树等复杂算法，在用C写这种性能相关的程序时原则上基本不会考虑使用，
   尽量使用数组一类的最简单最直接的算法，必要时考虑空间换时间)。

   目标：一个HTTP性能超越 nginx 的服务器框架
   详见 ../../docs/idea.txt
